#!/usr/bin/env bash

#{{{ ---- CAPTURE ----

#                                   ███████
#                               ████       ████
#                             ██   █       █   ██
#                             ██   ██      █   ██
#                           ██     █ █     █     ██
#                           ██     █  █    █     ██ GitHub:
#                           ██     █   █   █     ██ https://github.com/trueNAHO
#                           ██     █    █  █     ██
#                             ██   █     █ █   ██
#                             ██   █      ██   ██
#                               ████       ████
#                                   ███████

#}}}

#{{{ Functions
#------------------------------------------------------------------------------
#                                  Functions
#------------------------------------------------------------------------------

helpMessage() {
  printf '%b\n' \
    "Usage: $0 [options]\n" \
    "Options:" \
    "\t--filename NAME\t\t\t\tset output file name" \
    "\t--extension EXT\t\t\t\tset output file extension" \
    "\t-d DIRECTORY, --directory DIRECTORY\tset target directory" \
    "\t-e EDITOR, --edit EDITOR\t\tedit file after capture with EDITOR" \
    "\t-f, --fullscreen\t\t\tcapture full screen" \
    "\t-h, --help\t\t\t\tprint this help message" \
    "\t-o, --open\t\t\t\tview file with 'xdg-open'" \
    "\t-r SIZE, --resize SIZE\t\t\tresize, if any dimension is smaller than SIZE" \
    >&2
  exit 1
}

#}}}

#{{{ Default Values
#------------------------------------------------------------------------------
#                               Default Values
#------------------------------------------------------------------------------

declare -i minSize=500
directory="/tmp/capture/"
extension="png"
filename="img"

#}}}

#{{{ Command Line Arguments
#------------------------------------------------------------------------------
#                           Command Line Arguments
#------------------------------------------------------------------------------

while [ -n "$1" ]; do
  case "$1" in
    -h|--help)
      helpMessage
      ;;
    --extension)
      if [[ -n $2 ]]; then extension=$2; shift 2; else helpMessage; fi
      ;;
    --filename)
      if [[ -n $2 ]]; then filename=$2; shift 2; else helpMessage; fi
      ;;
    -d|--directory)
      if [[ -n $2 ]]; then directory=$2; shift 2; else helpMessage; fi
      ;;
    -e|--edit)
      if [[ -n $2 ]]; then editor=$2; shift 2; else helpMessage; fi
      ;;
    -f|--fullscreen)
      is_fullscreen="-window root"; shift
      ;;
    -o|--open)
      declare -i is_open=1; shift
      ;;
    -r|--resize)
      if [[ -n $2 ]]; then minSize=$2; shift 2; else helpMessage; fi
      ;;
    *)
      helpMessage
      ;;
  esac
done

#}}}

#{{{ Main Code
#------------------------------------------------------------------------------
#                                  Main Code
#------------------------------------------------------------------------------

if [[ ! -d "$directory" ]]; then
 mkdir -p "$directory"
fi

file="${directory}${filename}.${extension}"

read -r width height < <(
  import -verbose $is_fullscreen "$file" \
  | gawk '
    BEGIN {FPAT=" [[:digit:]]*x[[:digit:]]* "}
    {split($1, a, "x"); print a[1], a[2]}
    '
)

if (( width < minSize || height < minSize )); then
  mogrify -resize "${minSize}x${minSize}^" "$file" \
  && printf 'Resized image: %s\n' "$file"
fi

if [[ -n $editor ]]; then
  printf 'Running: %s\n' "$editor $file"
  if ! $editor "$file" 2>/dev/null; then
    printf 'Unable to run command: %s\n' "$editor $file" >&2
  fi
fi

if (( is_open )); then
  printf 'Opening: %s\n' "$file"
  if ! xdg-open "$file" 2>/dev/null; then
    printf 'Unable to open: %s\n' "$file" >&2
  fi
fi

if xclip -selection clipboard -t "image/$extension" -i "$file"; then
  printf 'Copied file to clipboard: %s\n' "$file"
else
  printf 'Unable to copy file to clipboard: %s\n' "$file" >&2
fi

#}}}

# vim: ft=bash fdm=marker et sts=2 sw=2 ts=2 tw=80
