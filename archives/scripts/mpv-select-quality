#!/usr/bin/env bash

#{{{ ---- MPV - SELECT QUALITY ----

#                                   ███████
#                               ████       ████
#                             ██   █       █   ██
#                             ██   ██      █   ██
#                           ██     █ █     █     ██
#                           ██     █  █    █     ██ GitHub:
#                           ██     █   █   █     ██ https://github.com/trueNAHO
#                           ██     █    █  █     ██
#                             ██   █     █ █   ██
#                             ██   █      ██   ██
#                               ████       ████
#                                   ███████

#}}}

#{{{ Functions
#------------------------------------------------------------------------------
#                                  Functions
#------------------------------------------------------------------------------

helpMessage() {
  local output="Usage: $0 [options] URL [URL2 [...]]\n\n"
  output+="Options:\n"
  output+="\t-d, --dmenu\t\t\toverride any values by 'dmenu' selection\n"
  output+="\t-f NUMBER, --fps NUMBER\t\tmaximum fps, if available\n"
  output+="\t-h NUMBER, --height NUMBER\tmaximum height, if available\n"
  output+="\t-h, --help\t\t\tprint this help message\n"
  output+="\t-w NUMBER, --width NUMBER\tmaximum width, if available\n"
  printf '%b' "$output" >&2
  exit 1
}

#}}}

#{{{ Default Values
#------------------------------------------------------------------------------
#                               Default Values
#------------------------------------------------------------------------------

declare -i fps=30
declare -i height=720
declare -i width=1280

#}}}

#{{{ Command Line Arguments
#------------------------------------------------------------------------------
#                           Command Line Arguments
#------------------------------------------------------------------------------

if (( $# == 0 )); then
  helpMessage
fi

while [ -n "$1" ]; do
  case "$1" in
    --help)
      helpMessage
      ;;
    -d|--dmenu)
      declare -i is_dmenu=1; shift
      ;;
    -f|--fps)
      if [[ -n $2 ]]; then fps=$2; shift 2; else helpMessage; fi
      ;;
    -h|--height)
      if [[ -n $2 ]]; then height=$2; shift 2; else helpMessage; fi
      ;;
    -w|--width)
      if [[ -n $2 ]]; then width=$2; shift 2; else helpMessage; fi
      ;;
    *)
      break
      ;;
  esac
done

if (( $# == 0 )); then
  helpMessage
fi

if (( is_dmenu )); then

  # List all available formats for each given URL.
  for url in "$@"; do
    all_formats+=$(youtube-dl -F "$url" 2>/dev/null)
  done

  # If no valid URL was given.
  if [[ -z $all_formats ]]; then
    printf 'No valid URL was given. Exiting %s.\n' "$0" >&2
    exit 1
  fi

  if ! read -r width height fps < <(
    gawk '
      $0 ~ "[[:digit:]]+x[[:digit:]]+.*[[:digit:]]+fps" {
        patsplit($0, a, "[[:digit:]]+x[[:digit:]]+|[[:digit:]]+fps")
        print a[1] " (" a[2] ")"
      }' <(printf '%s' "$all_formats") \
    | sort -gru \
    | dmenu -p "Quality" \
    | gawk '{print gensub("x|fps|\\(|\\)", " ", "g")}'
  ); then
    printf "'dmenu' was aborted. Exiting %s.\n" "$0" >&2
    exit 1
  fi

fi

#}}}

# {{{ Main Code
#------------------------------------------------------------------------------
#                                  Main Code
#------------------------------------------------------------------------------

format="bestvideo[fps<=?${fps}][height<=?${height}][width<=?${width}]+bestaudio"
format_fallback1="best[fps<=?${fps}][height<=?${height}][width<=?${width}]"
format_fallback2="best"

mpv --ytdl-format="${format}/${format_fallback1}/${format_fallback2}" "$@"

# }}}
