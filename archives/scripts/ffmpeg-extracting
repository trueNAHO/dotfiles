#!/usr/bin/gawk -f
# vim: fdm=marker

# This script allows to extract sections from a video or audio file and can
# also change the output file's extension format.

#                    ███████
#                ████       ████
#              ██   █       █   ██
#              ██   ██      █   ██
#            ██     █ █     █     ██
#            ██     █  █    █     ██    NAHO
#            ██     █   █   █     ██    GitLab: NOT CREATED YET
#            ██     █    █  █     ██
#              ██   █     █ █   ██
#              ██   █      ██   ██
#                ████       ████
#                    ███████

#{{{ Help page
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                  Help page
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# This script takes three variables in: the 'input_file', the 'timestamps_file'
# and the 'output_extension'.

# The 'input_file' can be one of the following two things: the path referring
# to the file stored on your system OR the output from the 'youtube-dl
# --get-url $URL' command (see 'youtube-dl --help' command for more information)
# . By using the second method, you don't need to first download the entire
# video in order to run this script and can simply get what you need.

# The 'timestamps_file' must be the path referring the file containing the
# necessary information for extracting the desired sections. Note that this
# file MUST follow a certain logic, in order for this script to work. Each line
# consists of two items: the starting time (see 'man ffmpeg-utils' command for
# more information) and the name given to that section. The ending time for
# a section is deduced based on the next section's start time. The last line of
# the file must contain the final end point. If this is not done, then the last
# section will not be considered (If this is done on purpose, then the line
# CANNOT have as last character the time indication and MUST therefore at least
# end with a white space character) . If a section name occurs multiple times
# (after name conversion), only the first occurrence will be considered.

# The 'output_extension' must be supported by 'ffmpeg'. For further information
# see the 'ffmpeg -codecs' command.

# Here are two valid 'timestamps_file' examples:

#  -----------------------
# | 00:00 Prologue        |  prologue.EXTENSION       --> from 00:00 to 03:26
# | 03:26 Prohibited Art  |  prohibited_art.EXTENSION --> from 03:26 to 05:19
# | 05:19 Commandment     |  commandment.EXTENSION    --> from 05:19 to 07:14
# | 07:14 Black Blood     |  black_blood.EXTENSION    --> from 07:14 to 09:17
# | 09:17 Resurrection    |  resurrection.EXTENSION   --> from 09:17 to 11:11
# | 11:11                 |  NO FILE PRODUCED
#  -----------------------

#  -----------------------
# | 3:26 Prohibited Art   |  prohibited_art.EXTENSION --> from 03:26 to 05:19
# | 05:19                 |
# | 9:17.333 Resurrection |  resurrection.EXTENSION   --> from 09:17+0.333s
# | 11:11                 |                               to 11:11
# | 5:19 Commandment      |  commandment.EXTENSION    --> from 05:19 to 434s
# | 434 Black Blood       |  NO FILE PRODUCED
#  -----------------------
#}}}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                  Functions
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function time_to_seconds(time) {
    split(time, times, ":")
    alen=length(times)
    return times[alen] + times[alen-1]*60 + times[alen-2]*3600
}

function name_converter(name) {
    if (file_name_option == 1)
        return gensub(/\s+/, whitespace_replacer, "g", gensub(/\s+/, "", 1, name))
    else if (file_name_option == 2)
        return tolower(gensub(/\s+/, whitespace_replacer, "g", gensub(/\s+/, "", 1, name)))
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                  Main Code
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

BEGIN {

    # Invalid input if too many or not enough arguments were given.
    if (ARGC != 4) {
        print "Invalid number of arguments. Use as follows (in correct order):\
              \n\t<input_file> <timestamps_file> <output_extension>" \
              > "/dev/stderr"
        exit 2
    }

    # Using same codec if 'output_extension' and extension from 'input_file'
    # are the same.
    split(ARGV[1], dots, ".")
    if (ARGV[3] ==  dots[length(dots)]) {
        print "==> Input file's extension and 'output_extension' are the same\
              \n==> Copying codec for faster processing"
        command_format = "ffmpeg -ss %d -i '%s' -t %d -codec copy %s.%s"
    }

    # 'output_extension' and extension from 'input_file' are not the same.
    else {
        command_format = "ffmpeg -ss %d -i '%s' -t %d %s.%s"
    }

    # Setting variables that can easily be accessed.
    file_name_option = 2
    whitespace_replacer = "_"

    # Managing internal variables.
    delete dots
    input_file = ARGV[1]; delete ARGV[1]
    output_extension = ARGV[3]; delete ARGV[3]
    empty_line = "^" whitespace_replacer "*$"

}

{

    # Creating output based on some conditions.
    if (NR!=1 && is_print==1) {
        system(sprintf(command_format, start_time, input_file, \
               time_to_seconds($1)-start_time, file_name, output_extension))
    }

    # Storing variables used for the following line. This is done on every line.
    start_time = time_to_seconds($1)
    file_name = name_converter(substr($0, index($0,FS)+1))
    NF==1 ? is_print=0 : is_print=1

}
