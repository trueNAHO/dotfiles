#!/bin/sh

# Install packages either system-wide or in the home directory depending on the
# values of the IS_INSTALL_PACKAGES and IS_INSTALL_LOCALLY settings, and the
# availability of package managers and sudo access. If the IS_INSTALL_PACKAGES
# variable is set to true, the packages will be installed, otherwise, they will
# be skipped. If IS_INSTALL_LOCALLY is false, and a supported package manager is
# found with sudo access, the packages will be installed system-wide using that
# package manager. If IS_INSTALL_LOCALLY is true, the packages will be installed
# in the home directory using the JuNest tool if it is available, otherwise
# JuNest will be installed first. If IS_INSTALL_LOCALLY is false, no supported
# package manager is found, and sudo access is not available, an error message
# will be printed to standard error.
#
# Requirements: curl, git, wget

{{ template "status_error.sh.tmpl" }}

readonly IS_INSTALL_LOCALLY="{{- default "0" (index . "isInstallLocally") -}}"
readonly IS_INSTALL_PACKAGES="{{- default "1" (index . "isInstallPackages") -}}"
readonly JUNEST_BIN="{{- default "$HOME/.local/share/junest/bin" (index . "junestBin") -}}"
readonly JUNEST_DIR="{{- default "$HOME/.local/share/junest" (index . "junestDir") -}}"
readonly JUNEST_PACKAGE_MANAGER_AUR="{{- default "yay" (index . "junestPackageManagerAur") -}}"
readonly JUNEST_PACKAGE_MANAGER_OFFICIAL="{{- default "pacman" (index . "junestPackageManagerOfficial") -}}"
readonly JUNEST_REPO_URL="{{- default "https://github.com/fsquillace/junest.git" (index . "junestRepoUrl") -}}"
readonly PACMAN_WRAPPERS_AUR="{{- default "aura pacaur pakku paru pikaur trizen yay" (index . "pacmanWrappersAur") -}}"

# Install AUR packages either system-wide or in the home directory depending on
# the values of the IS_INSTALL_PACKAGES and IS_INSTALL_LOCALLY settings, and the
# availability of supported AUR package managers and sudo access. If the
# IS_INSTALL_PACKAGES variable is set to true, the packages will be installed,
# otherwise, they will be skipped. If IS_INSTALL_LOCALLY is false, and a
# supported package manager is found with sudo access, the packages will be
# installed system-wide using that package manager. If IS_INSTALL_LOCALLY is
# true, the packages will be installed in the home directory using the JuNest
# tool if it is available, otherwise JuNest will be installed first. If
# IS_INSTALL_LOCALLY is false, no supported package manager is found, and sudo
# access is not available, an error message will be printed to standard error.
#
# Usage: install_packages_aur package1 [package2 ...]
install_packages_aur() {
    if [ "$IS_INSTALL_PACKAGES" -eq 0 ]; then
        return
    fi

    package_manger="$(__package_manager_aur)"
    readonly package_manger

    if [ "$IS_INSTALL_LOCALLY" -eq 0 ] &&
        __is_sudo && command -v "$package_manger" >/dev/null 2>&1; then
        "$package_manger" --needed --noconfirm -S "$@"

    elif ! [ "$IS_INSTALL_LOCALLY" -eq 0 ]; then
        if ! PATH="$JUNEST_BIN:$PATH" command -v junest >/dev/null 2>&1; then
            __install_junest
        fi

        PATH="$JUNEST_BIN:$PATH" junest \
            proot "$JUNEST_PACKAGE_MANAGER_AUR" --needed --noconfirm -S "$@"

    else
        status_error \
            "IS_INSTALL_LOCALLY variable is set to: $IS_INSTALL_LOCALLY" \
            "Error: No supported AUR package manager is installed: $PACMAN_WRAPPERS_AUR" \
            "Error: Unable to install the following packages: $*"
    fi
}

# Install official Arch Linux packages either system-wide or in the home
# directory depending on the values of the IS_INSTALL_PACKAGES and
# IS_INSTALL_LOCALLY settings, and the availability of the pacman package
# manager and sudo access. If the IS_INSTALL_PACKAGES variable is set to true,
# the packages will be installed, otherwise, they will be skipped. If
# IS_INSTALL_LOCALLY is false, and pacman is found with sudo access, the
# packages will be installed system-wide using pacman. If IS_INSTALL_LOCALLY is
# true, the packages will be installed in the home directory using the JuNest
# tool if it is available, otherwise JuNest will be installed first. If
# IS_INSTALL_LOCALLY is false, no supported package manager is found, and sudo
# access is not available, an error message will be printed to standard error.
#
# Usage: install_packages_official package1 [package2 ...]
install_packages_official() {
    if [ "$IS_INSTALL_PACKAGES" -eq 0 ]; then
        return
    fi

    if [ "$IS_INSTALL_LOCALLY" -eq 0 ] &&
        __is_sudo && command -v pacman >/dev/null 2>&1; then
        sudo pacman --needed --noconfirm -S "$@"

    elif ! [ "$IS_INSTALL_LOCALLY" -eq 0 ]; then
        if ! PATH="$JUNEST_BIN:$PATH" command -v junest >/dev/null 2>&1; then
            __install_junest
        fi

        PATH="$JUNEST_BIN:$PATH" junest proot \
            sudo "$JUNEST_PACKAGE_MANAGER_OFFICIAL" --needed --noconfirm -S "$@"

    else
        status_error \
            "IS_INSTALL_LOCALLY variable is set to: $IS_INSTALL_LOCALLY" \
            "Error: Package manager 'pacman' not found." \
            "Error: Unable to install the following packages: $*"
    fi
}

# Print the first available command from a list of commands.
#
# Usage: __find_first_available_command [command1 ...]
__find_first_available_command() {
    for i in "$@"; do
        if command -v "$i" >/dev/null 2>&1; then
            printf '%s\n' "$i"
            return
        fi
    done

    printf '%s\n' ""
}

# Install and setup the JuNest tool in the home directory.
#
# Usage: __install_junest
__install_junest() {
    git clone "$JUNEST_REPO_URL" "$JUNEST_DIR"

    PATH="$JUNEST_BIN:$PATH" junest setup
    PATH="$JUNEST_BIN:$PATH" junest create-bin-wrappers -f
    PATH="$JUNEST_BIN:$PATH" junest proot \
        sudo pacman --noconfirm -Syyu base-devel
}

# Return true if the current user has sudo access, false otherwise.
__is_sudo() {
    command -v sudo >/dev/null 2>&1 && sudo -v
}

# Print the first supported AUR package manager that is installed.
#
# Usage: __package_manager_aur
__package_manager_aur() {
    # The double quotes around the `PACMAN_WRAPPERS_AUR` variable are
    # intentionally omitted to split on spaces.
    __find_first_available_command $PACMAN_WRAPPERS_AUR
}
