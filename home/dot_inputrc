# `Readline` is a library by the GNU Project, used by Bash and other
# CLI-interface programs to edit and interact with the command line. See
# readline(3) for more information.

# @url https://wiki.archlinux.org/title/Readline
# This configuration file is heavily inspired by the ArchWiki.

# @url https://bbs.archlinux.org/viewtopic.php?id=112537
# It is recommended that you also add the following line at the beginning of
# this file to avoid strange things like in the given post.
$include /etc/inputrc

# Controls whether readline begins with a set of key bindings  similar  to
# Emacs  or  vi. `editing-mode` can be set to either emacs or vi.
set editing-mode vi

# If  set  to On, add a string to the beginning of the prompt indicating the
# editing mode: emacs, vi  command,  or  vi  insertion.   The  mode  strings
# are  user-settable  (e.g., emacs-mode-string).
set show-mode-in-prompt on

# This will set a block shaped cursor when in command mode and a pipe cursor
# when in insert mode. Note that you must have the mode indicator enabled for
# this to work. The Virtual Console uses different escape codes, so you should
# check first which term is being used.
$if term=linux
    set vi-ins-mode-string \1\e[?0c\2
    set vi-cmd-mode-string \1\e[?8c\2
$else
    set vi-ins-mode-string \1\e[6 q\2
    set vi-cmd-mode-string \1\e[2 q\2
$endif

# Xterm supports moving between words with Ctrl+Left and Ctrl+Right by default.
# To achieve this effect with other terminal emulators, find the correct
# terminal codes.
"\e[1~": beginning-of-line
"\e[4~": end-of-line
"\e[5~": beginning-of-history
"\e[6~": end-of-history
"\e[7~": beginning-of-line
"\e[3~": delete-char
"\e[2~": quoted-insert
"\e[5C": forward-word
"\e[5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word
"\e[1;5C": forward-word
"\e[1;5D": backward-word

# Usually, pressing the up arrow key will cause the last command to be shown
# regardless of the command that has been typed so far. However, users may find
# it more practical to list only past commands that match the current input.
$if mode=vi
    # these are for vi-command mode
    set keymap vi-command
    "\e[A": history-search-backward
    "\e[B": history-search-forward
    j: history-search-forward
    k: history-search-backward

    # these are for vi-insert mode
    set keymap vi-insert
    "\e[A": history-search-backward
    "\e[B": history-search-forward
$else
    "\e[A": history-search-backward
    "\e[B": history-search-forward
$endif

# When performing tab completion, a single tab attempts to partially complete
# the current word. If no partial completions are possible, a double tab shows
# all possible completions. The double tab can be changed to a single tab.
set show-all-if-unmodified on

# When performing tab completion, a single tab attempts to partially complete
# the current word. If no partial completions are possible, a double tab shows
# all possible completions. You can set it such that a single tab will
# perform both steps: partially complete the word and show all possible
# completions if it is still ambiguous.
set show-all-if-ambiguous on

# You can enable coloring of completion of filenames with the colored-stats
# option. You can also color the identical prefix of completion-lists with
# colored-completion-prefix.

# Color files by types. Note that this may cause completion text blink in some
# terminals (e.g. xterm).
set colored-stats On
# Append char to indicate type.
set visible-stats On
# Mark symlinked directories.
set mark-symlinked-directories On
# Color the common prefix.
set colored-completion-prefix On
# Color the common prefix in menu-complete.
set menu-complete-display-prefix On
