#!/usr/bin/env bash

# Set a random wallpaper and use a blurred copy of it for the borders instead of
# black borders. All CLI arguments are passed to the `find` command to pick a
# random file. If the number of files found by the `find` command and the number
# of monitors are not the same, then the found files are shuffled and may
# repeat.

# Unified print format for the `create_image` function. The first argument is
# separated by the remaining arguments by a single space. The first argument
# corresponds to the exit status of the `create_image` function. All remaining
# arguments are concatenated to a string.
create_image_print() {
    printf '%d %s\n' "$1" "${*:2}"
}

# Print the image status and its associated file as specified by the
# `create_image_print` function. The image status describes the image creation
# type. The first image status means that the associated file corresponds to the
# original image. The second image status means that the associated file
# corresponds to a newly created image, which should probably be removed by the
# caller. The first argument is the original image. The second argument is
# dimensions of the original image. The third argument is the dimensions of the
# monitor on which the original image is to be displayed on. The fourth and
# fifth argument are the first and second possible image status respectively.
create_image() {
    read -r _image_width _image_height <<<"$2"
    read -r _monitor_width _monitor_height <<<"$3"

    # Skip all ImageMagick operations when the image and screen aspect ratios
    # are the same. This potentially improves performance because the main image
    # would entirely overlap the image below it in this case.
    if
    ((_monitor_width * _image_height == _image_width * _monitor_height))
    then
        _create_image_image="$1"
        _create_image_status="$4"
    else
        _create_image_image="$(mktemp)" || return
        _create_image_status="$5"

        _blur="0x8"
        _memory_program_register="image_resize"

        magick \
            "$1" \
            \( \
            +clone \
            -resize "${_monitor_width}x${_monitor_height}" \
            -write "mpr:${_memory_program_register}" \
            +delete \
            \) \
            -resize "${_monitor_width}x${_monitor_height}^" \
            -gravity center \
            -extent "${_monitor_width}x${_monitor_height}^" \
            -blur "$_blur" \
            "mpr:${_memory_program_register}" \
            -gravity Center \
            -composite \
            "$_create_image_image" || return
    fi

    create_image_print "$_create_image_status" "$_create_image_image"
}

# Call the `create_image` function with the necessary setup.
create_images() {
    __image_original="$(find "${image_path[@]}" -type f)" || return
    __monitor_dimension="$(get_monitor_dimension)" || return

    readarray -t _image_original <<<"$__image_original"
    readarray -t _monitor_dimension <<<"$__monitor_dimension"

    if ((${#_image_original[@]} != ${#_monitor_dimension[@]})); then
        readarray -t _image_original <<<"$(
            shuf -ern "${#_monitor_dimension[@]}" "${_image_original[@]}"
        )"
    fi

    printf '%s\n' "${_image_original[@]}" >&2

    # https://stackoverflow.com/questions/1555509
    # https://stackoverflow.com/questions/4670013
    # https://stackoverflow.com/questions/17757114
    # Parallelizing this command improves performance when passing many
    # arguments, but worsens it when passing a small number of arguments. The
    # number of arguments corresponds to the number of active monitors. This
    # number should be reasonably low in real life environments. Therefore it
    # seems safe to pick the implementation that favours a small number of
    # arguments.
    __image_dimension="$(
        magick identify \
            -format '%w %h\n' \
            -ping \
            "${_image_original[@]}" \
            2>/dev/null
    )" || return

    readarray -t _image_dimension <<<"$__image_dimension"

    # Export functions so that parallel processes can access them.
    export -f create_image create_image_print

    # Export the `create_image` and `create_image_print` functions for the
    # parallel process to access them. The parallelization overhead seems
    # negligible compared to the underlying operation. Overall, parallelization
    # improves performance in almost every case.
    parallel \
        --halt now,fail=1 \
        --keep-order \
        create_image \
        "{1}" \
        "{2}" \
        "{3}" \
        "${create_image_status[0]}" \
        "${create_image_status[1]}" \
        ::: "${_image_original[@]}" \
        :::+ "${_image_dimension[@]}" \
        :::+ "${_monitor_dimension[@]}" || return
}

# Interface for getting monitor dimensions. This implementation only supports
# the X server.
get_monitor_dimension() {
    xrandr --listactivemonitors | awk -F '[ /x]+' 'NR != 1 {print $4, $6}'
}

# Interface for setting the wallpapers. All arguments represent the wallpapers'
# file paths and are passed to the underlying command.
set_wallpaper() {
    feh --bg-max --no-fehbg "$@"
}

main() {
    image_path=("${@:-$(xdg-user-dir PICTURES)}") || return

    create_image_status=(0 1)

    _create_images_output="$(create_images)"
    create_images_status=$?

    readarray -t create_images_output <<<"$_create_images_output"

    image_remove=()
    image_wallpaper=()

    # Extract data formatted by the `create_image_print` function.
    for _image in "${create_images_output[@]}"; do
        read -r _image_status _image_image <<<"$_image"

        if ((_image_status == create_image_status[0])); then
            image_wallpaper+=("$_image_image")
        elif ((_image_status == create_image_status[1])); then
            image_remove+=("$_image_image")
            image_wallpaper+=("$_image_image")
        else
            printf '%s\n' "unknown image status: $_image_status" >&2
        fi
    done

    # Do not set wallpapers with invalid files.
    if ((create_images_status)); then
        printf '%s\n' "Retry or provide another input:" "${image_path[@]}" >&2
    else
        # https://stackoverflow.com/questions/12985178
        set_wallpaper "${image_wallpaper[@]@Q}"
    fi

    # Parallelizing this command improves performance when passing many
    # arguments, but worsens it when passing a small number of arguments. The
    # number of arguments is roughly related to the number of active monitors.
    # This number should be reasonably low in real life environments. Therefore
    # it seems safe to pick the implementation that favours a small number of
    # arguments.
    for _image in "${image_remove[@]}"; do
        rm -- "$_image"
    done

    return 0
}

main "$@"
