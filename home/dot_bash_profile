#!/usr/bin/env bash
# shellcheck disable=SC2024

# `bash_profile` is the personal initialization file, executed for login
# shells.

# Greet the user.
greet() {
    printf '\n'
    fortune
    printf '\n'
}

# Potentially replace the current shell with a graphical user interface.
exec_graphical_user_interface() {
  # Replace `-eq` comparison with `-le` to use graphical logins on multiple
  # virtual machines. The `exec` command assures that the user is logged out
  # when the X Server exits, crashed or is killed by an attacker. If you want
  # to take the risk and remain logged in when the X session ends, remove
  # `exec`.
  if [[ -z "$DISPLAY" && "$XDG_VTNR" == 1 ]]; then
    status "start graphical user interface"
    exec startx
  fi
}

# Potentially extend the `$PATH` variable.
extend_path() {
  status "export PATH=$PATH"

  declare -r -a paths_prefix=(
    "$HOME/.bin"
    "$HOME/.local/bin"
    "$HOME/.local/share/junest/bin"
  )

  declare -r -a paths_suffix=(
    "$HOME/.junest/usr/bin_wrappers"
  )

  for path in "${paths_prefix[@]}"; do
    [[ -d "$path" ]] && PATH="$path:$PATH"
  done

  for path in "${paths_suffix[@]}"; do
    [[ -d "$path" ]] && PATH="$PATH:$path"
  done

  export PATH
  status "export PATH=$PATH"
}

# Link user specify directory in `/tmp` to `$HOME`.
link_tmp_to_home() {
  export TMPDIR="$HOME/tmp"

  if [[ ! -d "$TMPDIR" ]]; then
    declare -r target="$(mktemp -d -p "/tmp" "$(id --user)"'_XXXXXXXXXX')"
    status "symlink $target to $TMPDIR"
    ln -fs "$target" "$TMPDIR"
  fi
}

# Set configurations for various tools.
set_configs() {
  status "set configurations for various tools"

  # Causes searches to ignore case; that is, uppercase and lowercase are
  # considered identical. This option is ignored if any uppercase letters
  # appear in the search pattern; in other words, if a pattern contains
  # uppercase letters, then that search does not ignore case.
  export LESS="-Ri"

  # @url https://vi.stackexchange.com/questions/
  # Set `nvim` as manpager.
  export MANPAGER="sh -c \"col -bx | nvim -c 'set ft=man nomod noma' -\""
}

# Set system defaults.
set_system_defaults() {
  status "set system defaults"

  # Set default terminal.
  export TERMINAL="alacritty"

  # Set default text editor.
  export EDITOR="nvim"
  export VISUAL="nvim"

  # Set environment variable for the `qt5ct` tool.
  export QT_QPA_PLATFORMTHEME="qt5ct"

  # Set XDG user directories.
  source "$HOME/.config/user-dirs.dirs"
}

# Potentially source the user's bashrc.
source_bashrc() {
  declare -r user_bashrc="$HOME/.bashrc"

  if [[ -f "$user_bashrc" ]]; then
    status "source $user_bashrc"
    source "$user_bashrc"
  fi
}

# Print status messages. All arguments form one status message.
status() {
  printf 'bash_profile: %s\n' "$*"
}

# @url https://ryanlue.com/posts/2017-06-29-gpg-for-ssh-auth
# @url https://wiki.archlinux.org/title/SSH_keys#SSH_agents
# Use GPG key for SSH authentication.
use_ssh_socket() {
  status "export 'SSH_AUTH_SOCK' variable to use GPG key for SSH authentication"

  # Set UNIX-domain socket for `ssh-agent`.
  export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"
}

# Make sure the `exec` command is the last one executed in this script. No
# further statements will be executed.
main() {
  greet
  extend_path
  link_tmp_to_home
  set_system_defaults
  set_configs
  use_ssh_socket
  source_bashrc
  exec_graphical_user_interface
}

main
