#!/usr/bin/env bash
# shellcheck disable=SC2034

# `xinitrc` configures the initialisation of xinit.

declare -r -a graphical_user_interfaces=(leftwm awesome)
declare -r -i screensaver_timout_seconds=180
declare -r -i wallpaper_interval_minutes=15
declare -r -i wallpaper_nice=19
declare -r system_modmap="/etc/X11/xinit/.Xmodmap"
declare -r system_programs="/etc/X11/xinit/xinitrc.d"
declare -r system_resources="/etc/X11/xinit/.Xresources"
declare -r user_modmap="$HOME/.Xmodmap"
declare -r user_resources="$HOME/.Xresources"

# Load entire closure in background to yield control back to the runtime as
# soon as possible. Make sure no processes lock the closure. Otherwise no
# further statements will be executed. For consistency load every process in
# the background.
async_load() { {
  set_keyboard_layout &

  # Use external locker as X screen saver.
  xss-lock --transfer-sleep-lock -- "$HOME/.local/bin/my-i3lock" &

  # Periodically set the wallpaper. Retry without waiting if the wallpaper
  # cannot be set. The actual wallpaper setter is not extremly fast. To shorten
  # the time before any wallpaper is set, the first iteration sets it in a less
  # sophisticated and much faster way.
  set_periodically_wallpaper &

  # Start a modal keyboard driven pointer manipulation program.
  warpd &

  # "Hide the mouse cursor when typing and show it again when the mouse moves."
  # (https://github.com/jcs/xbanish)
  xbanish &

  # Start X11 compositor.
  picom &

  # Set color temperature of display according to time of day.
  redshift &

  # Audio effects for Pipewire applications. This application requires a
  # display, even when running as service. Therefore it must be started from
  # a graphical user interface.
  easyeffects --gapplication-service &
} & }

# Replace current shell with a graphical user interface.
exec_graphical_user_interface() {
  for graphical_user_interface in "${graphical_user_interfaces[@]}"; do
    if command -v "$graphical_user_interface" >/dev/null 2>&1; then
      exec "$graphical_user_interface"
    fi
  done
}

# Set configurations for various tools.
set_configs() {
  # Load system settings for X.
  [[ -f "$system_resources" ]] && xrdb -merge "$system_resources"
  [[ -f "$system_modmap" ]]    && xmodmap "$system_modmap"

  # Load user settings for X.
  [[ -f "$user_resources" ]] && xrdb -merge "$user_resources"
  [[ -f "$user_modmap" ]]    && xmodmap "$user_modmap"

  # "Sxhkd clone for Wayland (works on TTY and X11 too)". "Because swhkd can be
  # used anywhere, the same swhkd config can be used across Xorg or Wayland
  # desktops, and you can even use swhkd in a TTY."
  # (https://github.com/waycrate/swhkd)
  killall swhks || :
  swhks &
  pkexec swhkd --config "${XDG_CONFIG_DIR:-$HOME/.config}/swhkd/swhkdrc" &

  # Set screen saver parameters.
  xset s "$screensaver_timout_seconds"
}

# @url https://unix.stackexchange.com/questions/253489/
# Source `$user_modmap` when plugging in a keyboard. Unplugging and plugging
# the keyboard back in resets the `xmodmap` settings.
set_keyboard_layout() {
  if [[ -f "$user_modmap" ]]; then
    inputplug -c /bin/echo -d \
        | while read -r event_type device_id device_type device_name; do
          if [[ "$event_type" == "XIDeviceEnabled"
              && "$device_type" == "XISlaveKeyboard" ]]; then
            xmodmap "$user_modmap"
          fi
        done
  fi
}

# Source bash scripts located in `system_programs`.
source_system_programs() {
  declare file
  if [[ -d "$system_programs" ]]; then
    for file in "$system_programs"/?*.sh; do
      [[ -x "$file" ]] && source "$file"
    done
  fi
}

# @url https://bbs.archlinux.org/viewtopic.php?id=212470
# Periodically set the wallpaper. Retry without waiting if the wallpaper cannot
# be set. The actual wallpaper setter is not extremly fast. To shorten the time
# before any wallpaper is set, the first iteration sets it in a less
# sophisticated and much faster way.
set_periodically_wallpaper() {
  # Setting the image with feh's --bg-tile flag is much faster than with
  # the --bg-max flag. Nevertheless we use the --bg-max flag because the user
  # experience is more important in this case. Switching from the --bg-max to
  # the --bg-tile flag would improve performace by a few percent but heavily
  # decrease the user experience.
  feh --bg-max --no-fehbg --randomize --recursive "$(xdg-user-dir PICTURES)"

  while true; do
    nice -n "$wallpaper_nice" set_wallpaper &&
      sleep "${wallpaper_interval_minutes}m"
  done
}

# Asynchronous function should be called after synchronous one to assure
# correct processing order. Make sure the `exec` command is the last one
# executed in this script. No further statements will be executed.
main() {
  set_configs
  source_system_programs
  async_load
  exec_graphical_user_interface
}

main
