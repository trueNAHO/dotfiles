#!/usr/bin/env bash
# shellcheck disable=SC2034

# `xinitrc` configures the initialisation of xinit.

declare -r system_modmap="/etc/X11/xinit/.Xmodmap"
declare -r system_programs="/etc/X11/xinit/xinitrc.d"
declare -r system_resources="/etc/X11/xinit/.Xresources"
declare -r user_modmap="$HOME/.Xmodmap"
declare -r user_resources="$HOME/.Xresources"

# Load entire closure in background to yield control back to the runtime as
# soon as possible. Make sure no processes lock the closure. Otherwise no
# further statements will be executed. For consistency load every process in
# the background.
async_load() { {
  # @url https://unix.stackexchange.com/questions/253489/
  # Source `$user_modmap` when plugging in a keyboard. Unplugging and plugging
  # the keyboard back in resets the `xmodmap` settings.
  if [[ -f "$user_modmap" ]]; then
    inputplug -c /bin/echo -d \
        | while read -r event_type device_id device_type device_name; do
          if [[ "$event_type" == "XIDeviceEnabled"
              && "$device_type" == "XISlaveKeyboard" ]]; then
            xmodmap "$user_modmap"
          fi
        done &
  fi

  # Clone all connected outputs with the largest resolution (scaled down if
  # necessary).
  autorandr clone-largest &

  # Start X11 compositor.
  picom &

  # Set color temperature of display according to time of day.
  redshift &
} & }

# Replace current shell with a graphical user interface.
exec_graphical_user_interface() {
  exec awesome
}

# Set configurations for various tools.
set_configs() {
  # Load system settings for X.
  [[ -f "$system_resources" ]] && xrdb -merge "$system_resources"
  [[ -f "$system_modmap" ]]    && xmodmap "$system_modmap"

  # Load user settings for X.
  [[ -f "$user_resources" ]] && xrdb -merge "$user_resources"
  [[ -f "$user_modmap" ]]    && xmodmap "$user_modmap"

  # "Xbindkeys is a program that allows to bind commands to certain keys or key
  # combinations on the keyboard. Xbindkeys works with multimedia keys and is
  # independent of the window manager and desktop environment."
  # (https://wiki.archlinux.org/title/Xbindkeys)
  xbindkeys
}

# Source bash scripts located in `system_programs`.
source_system_programs() {
  declare file
  if [[ -d "$system_programs" ]]; then
    for file in "$system_programs"/?*.sh; do
      [[ -x "$file" ]] && source "$file"
    done
  fi
}

# Asynchronous function should be called after synchronous one to assure
# correct processing order. Make sure the `exec` command is the last one
# executed in this script. No further statements will be executed.
main() {
  set_configs
  source_system_programs
  async_load
  exec_graphical_user_interface
}

main
